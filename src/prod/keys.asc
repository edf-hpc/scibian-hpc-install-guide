== Password/keys changes

=== Root password

The hashed root password is stored in the variable
`profiles::cluster::root_password_hash` in yaml files. The value must be
encrypted using eyaml. It can be simply changed using the `eyaml` command.

----
# eyaml edit cluster.yaml
...
profiles::cluster::root_password_hash: DEC::PKCS7[hashed_password]!
...
----

Once changed, the new configuration must be applied on all the machines of the
cluster.

=== Root ssh key

The root ssh keys are stored in the internal repository. The privates keys must
be encrypted.
The ssh public rsa key is also in the variable
`openssh::server::root_public_key`.
It is necessary to change the files and the value of the variable at the same
time.
To avoid connections problems, it is necessary to follow these steps in this
order:

1. Change the keys files and the variable `openssh::server::root_public_key` in
the internal repository
2. Apply the configuration on all the machines exept the *admin* one
3. Apply the new configuration on the *admin* server.

NOTE: In case of desynchronization between the keys on the *admin* node and
those on the others nodes, it is always possible to use the root password to
connect.

=== SSH host keys

The ssh host keys are stored, encrypted, in the internal repository.
To avoid connections problems, it is necessary to follow these steps in this
order:

1. Change the keys files in the internal repository
2. Apply the configuration on all the machines of the cluster, including the
*admin* machine
3. Delete the file __/root/.ssh/known_hosts__ on the *admin* node.
4. When connecting to the nodes, __/root/.ssh/known_hosts__ will be
automatically populated if the Scibian HPC default configuration is
used.

=== Eyaml keys

Replacing the eyaml PKCS7 key pair consist in reality of two actions:

1. Generate a new pair of keys
2. Replace all the values encoded with the old pair with ones encoded with the
new pair of keys.

NOTE: As these operations implies decoding files and re-encoding them with
another key pair, it is not possible to perform other administrative
operations (like applying the configuration on nodes) on the cluster at the
same time. The changing keys operation must be fully completed before resuming
"normal" administrative operations.

These steps must be followed in order to safely change the eyaml keys:

==== Save the old keys

----
# cp /etc/puppet/secure/keys/private_key.pkcs7.pem \
     /etc/puppet/secure/keys/private_key.pkcs7.pem.old
# cp /etc/puppet/secure/keys/public_key.pkcs7.pem \
     /etc/puppet/secure/keys/public_key.pkcs7.pem.old
----

==== Copy the new keys in __/etc/puppet/secure/keys/__

==== Decrypt all the yaml files encoded using the old keys:

----
# eyaml decrypt \
  --pkcs7-private-key /etc/puppet/secure/keys/private_key.pkcs7.pem.old \
  --pkcs7-public-key /etc/puppet/secure/keys/public_key.pkcs7.pem.old \
  hieradata/<cluster>/cluster.eyaml
----

==== Encrypt the files with the new keys:

----
# eyaml encrypt hieradata/<cluster>/cluster.eyaml
----

It is not necessary to specify the paths of the keys if their files names does
not change.

==== Create a tarball, encode it with `clara enc` and add it to the __files__ directory of the internal repository:

----
# tar cJf /tmp/keys.tar.xz \
  /etc/puppet/secure/keys/private_key.pkcs7.pem \
  /etc/puppet/secure/keys/private_key.pkcs7.pem
# clara enc encode /tmp/keys.tar.xz
# cp /tmp/keys.tar.xz.enc <internal repository>/files/<cluster>/eyaml
# rm /tmp/keys.tar.xz /tmp/keys.tar.xz.enc
----

Where:

* <internal repository> is the directory that contains the clone of the internal
repository.
* <cluster> is the name of the cluster.

At this stage, the keys are now stored encrypted in the internal repository and
are available locally in the standard eyaml paths.

==== Apply the new configuration on the nodes where the propagation service runs:
In the default Scibian-HPC configuration, the PKCS7 keys propagation service
runs on all the generic service nodes. Firstly the encoded tarball must be
manually copied on the nodes:

----
# scp <internal repository>/files/<cluster>/eyaml/keys.tar.xz <generic server X>:/tmp
----

Where <generic server X> is the hostname of the generic server node.
Secondly apply the configuration using the new keys:

----
# hpc-config-apply --keys-source=file:///tmp
----

This will copy the eyaml PKCS7 key pair in the right directory to be serviced
by the propagation service to all others nodes when applying the puppet
configuration.
These last two operations must be executed on all the generic service nodes.

==== Once tested, remove the old saved keys from the *admin* node:

----
# rm /etc/puppet/secure/keys/private_key.pkcs7.pem.old \
     /etc/puppet/secure/keys/public_key.pkcs7.pem.old
----

=== Internal repository encoding key

NOTE: As these operations implies decoding files and re-encoding them with
another key, it is not possible to perform other administrative operations
(like applying the configuration on nodes) on the cluster at the same time.
The changing key operation must be fully completed before resuming "normal"
administrative operations.

Replacing the AES key used to encode files in the internal repository consist in
several steps:

==== Generate a new AES key

----
# openssl rand -base64 32
----

==== Replace all the encoded files in the internal repository by files encoded with the new key

For each encoded file in the internal repository, it is necessary to decode it
with the old key and re-encode it with the new one.

----
# clara enc decode <internal repository>/files/<cluster>/<filename>.enc
# openssl aes-256-cbc \
          -in <internal repository>/files/<cluster>/<filename> \
          -out <filename>.enc -k <AES KEY>
# rm <internal repository>/files/<cluster>/<filename>
----

Where:

* <internal repository> is the directory that contains the clone of the internal
repository
* <cluster> is the name of the cluster
* <filename> is the path of the file to encode
* <AES KEY> is the random 256 bits key.

Use `clara` for both operations, decode and encode, is not possible as it
support only one AES key.

==== Replace the AES key in the Hiera repository

The AES key must be placed in __cluster_decrypt_password__ in the cluster layer
of the Hiera repository:

----
# eyaml edit hieradata/<cluster>/cluster.eyaml
----

Replace the key:

----
cluster_decrypt_password: DEC::PKCS7[<AES KEY>]!
----

Apply the new configuration on the *admin* node, to update `clara`
configuration:

----
# hpc-config-apply
----

=== Replication account password

The credentials used to replicate the external LDAP tree are stored directly in
the ldif file used to configure the internal LDAP server.

The steps to change these credentials are described here:

1. Decode the configuration ldif file:

    # clara enc edit <internal repository>/files/<cluster>/<filename>.enc

2. The field to change is `olcSyncrepl:`, it contains all the necessary
informations to connect to the master LDAP server (login, password, URI, etc ..)

3. Apply the new configuration on the *proxy* nodes.

4. Follow the LDAP bootstrap procedure as described in <<bootstrap-ldap,
LDAP bootstrap>> on each *proxy* node. It is recommended to wait until the first
ldap replicate is complete before attempting to update the second, to not disrupt
authentication across the cluster.

NOTE: It is possible to change others values with this procedure, for example
the root LDAP password.

=== Monitoring certificates

The certificates used for monitoring are stored, encrypted, in the internal
repository in __<internal repository>/files/<cluster>/icinga2/certs/__. Each
host has a certificate and a key.
The steps to follow to change them are:

1. Change the key and certificate files in the internal repository
2. Apply the configuration on the concerned node
3. Update the certificate on the Icinga2 server

=== Munge key

NOTE: Scheduling service and jobs must be stopped to change the munge key.

WARNING: This will kill running jobs.

1. Stop the `slurmd` and `slurmctld` daemons.


2. Stop the munge daemon on all nodes.
3. Encrypt the new key with `Clara` and place it in
__<internal repository>/files/<cluster>/munge/munge.key.enc__
4. Apply the new configuration on all nodes.
5. restart the daemons.

=== Repo keyring

NOTE: The packages must be saved in another place.

The cluster must use a private cluster keyring. This keyring is used to sign the
local packages repository.

It is stored in the internal repository:
__<internal repository>/files/<cluster>/repo/__

Here are the steps to follow to change it:

1. Generates a new keyring:

    # LANG=C gpg --no-default-keyring \
    --keyring <internal repository>/files/<cluster>/repo/cluster_keyring.gpg \
    --secret-keyring <internal repository>/files/<cluster>/repo/cluster_keyring.secret.gpg \
    --gen-key

2. Encode the secret file with `clara encode`.
3. Apply the configuration on the *admin* node.
4. Delete the folder containing the local repository.
5. Re-create the repository with `clara`:

   # clara repo key
   # clara repo init scibian8-hpc

6. Add the previously saved packages with `clara`:

   # clara repo add scibian8-hpc mypackage_1-2.dsc
   # ...
