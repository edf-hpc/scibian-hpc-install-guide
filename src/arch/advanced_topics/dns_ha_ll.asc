[[arch-topics-dns_ll_ha]]
=== DNS Load-balancing and High-availability

This diagram gives an overview of the load-balancing and high-availability
mechanisms involved in the DNS service of Scibian HPC clusters:

[[img-dns_ll_ha]]
.DNS service load-balancing and high-availability
image::src/img/arch_dns_ha_ll.svg[width=450]

On Linux systems, when an application needs to resolve a network hostname, it
usually calls `gethostbyname*()` et `getaddrinfo()` functions of the libc. With
a common configuration of the Name Service Switch (in file
`/etc/nsswitch.conf`), the libc searches for the IP address in file /etc/hosts
and then fallback to a DNS resolution. The DNS solver gathers the IP address by
sending a request to the DNS nameservers in file `/etc/resolv.conf`. If this
file contains multiple nameservers, the solver sends the request to the first
nameserver. If it does not get the answer before the timeout, it sends the
request to the second nameserver, and so on . If the application needs another
DNS resolution, the solver will follow the same logic, always trying the first
nameserver in priority. It implies that, with this default configuration, as
long as the first nameserver answers the requests before the timeout, the other
nameservers are never requested and the load is not balanced.

This behaviour can be slightly altered with additional options in file
`/etc/resolv.conf`:

* `options rotate`: this option tells the libc DNS solver to send requests to
  all the nameservers for successive DNS requests of a process. The DNS solver
  is stateless and loaded locally to the processes as a library, either as a
  shared library or statically in the binary. Therefore, the rotation status is
  local to a process. The first DNS request of a process will always be sent to
  the first nameserver. The rotation only starts with the second DNS request of
  a process. Notably, this means that a program which sends one DNS request
  during its lifetime, launched _n_ times, will send _n_ DNS requests to the
  first nameserver only. While usefull for programs with long lifetime, this
  option can not be considered as an effecient and sufficient load-balancing
  technique.
* `options :timeout 1`: this option reduces the request timeout from default
  value 60 seconds to 1 second. This is usefull when a nameserver has an outage 
  since many processes are litteraly stuck waiting for this timeout when it
  occurs. This causes many latency issues. With this option, the libc DNS solver
  quickly tries the other nameservers and the side-effect of the outage are
  significantly reduced.

On Scibian HPC clusters, Puppet manages the file `/etc/resolv.conf` and ensures
these two options are present. It also randomizes the list the nameservers with
`fqdn_randomize()` function of the Puppet stdlib community module. This function
randomizes the order of the elements of an array but ensures the order stays
consistent with the node's FQDN. This prevent the file content from changing
with every Puppet runs. With this function, all the DNS nameservers are
equivalently balanced on the nodes. Combined with the `options rotate`, it forms
an efficient load-balancing mechanism.

The DNS servers are managed with `bind` daemon on the generic service nodes. All
the generic service nodes have a virtual IP address managed by `keepalived`
daemon. The IP addresses of the nameservers mentioned in file `/etc/resolv.conf`
on the nodes are these virtual IP addresses. If a generic service node fails,
the virtual IP address is automatically gathered by another generic service
node. In combination with the `options :timeout 1`, this consitutes a reliable
failover mechanism and ensures the high-availability of DNS service.
