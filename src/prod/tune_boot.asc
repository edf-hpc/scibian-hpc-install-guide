[[production-boot]]
== Network Boot and Installation Tuning

Puppet-HPC deploys a network boot and installation system with sane default
designed to work in most situations. However, you may need to tune the default
setup for specific needs. The following sections how to alter the setting of
all the network boot and installation components.

[[production-boot-ipxe]]
=== iPXE ROM

On Scibian HPC clusters, the default iPXE ROM is provided by the `ipxe`
package. Alternatively, you can build a custom ROM following the instructions
available on http://ipxe.org/[iPXE website] and deploy it with Puppet-HPC.

First, copy the custom ROM (ex: `custom.kpxe`) in the
`$ADMIN/hpc-privatedata/files/$CLUSTER/cluster/boot/ipxe/` directory.

Then, define the `boottftp::hpc_files` hash in the cluster layer of the Hiera
repository to declare the file to deploy:

[source,yaml]
----
boottftp::hpc_files:
  "%{hiera('tftp_dir')}/custom.kpxe":
    source: "%{::private_files_dir}/boot/ipxe/custom.kpxe"
----

Then, set the `ipxebin` parameter accordingly in the `boot_params` hash of
the cluster layer of the Hiera repository, for example:

[source,yaml]
----
boot_params:
  defaults:
    ipxebin: custom.kpxe
----

Finally, deploy configuration changes on DHCP and boot servers:

[source,bash]
----
hpc-config-push && \
  clush -bg hpc_profiles:bootsystem::server,hpc_profiles:dhcp::server \
    hpc-config-apply
----

[[production-boot-menu]]
=== Bootmenu Entries

As explained in <<arch-adv-bootmenu>>, the bootmenu entries available in iPXE
are declared in YAML files. Puppet-HPC provides a mechanism to deploy custom
entries and optionally override the defaults provided by
`scibian-hpc-netboot-bootmenu` package.

For this purpose, edit the cluster layer of the Hiera repository to declare the
`bootsystem::menu_entries` hash profile parameter, for example:

[source,yaml]
----
profiles::bootsystem::menu_entries:
  scibian9:
    ram:
      test:
        label:  Run {{ os }} in RAM
        initrd: initrd
        kernel: vmlinuz
        opts:   >
          initrd={{ initrd }}
          console={{ console }}
          ethdevice={{ boot_dev }}
          ethdevice-timeout={{ dhcp_timeout }}
          cowsize={{ cowsize }}
          transparent_hugepage=always
          disk-format={{ disk_format }}
          disk-raid={{ disk_raid }}
          boot=live
          union=overlay
          fetch=${base-url}/{{ os }}.squashfs.torrent
          {{ kernel_opts }}
----

This declares an additional `scibian9-ram-test` entry. Optionally, it is also
possible to set this entry as the default for some nodes in the `boot_params`
hash of the cluster layer of the Hiera repository, for example:

[source,yaml]
----
boot_params:
  fbcn04:
    os: scibian9
    media: ram
    version: test
----

This way, the `fbcn04` node will boot this new entry by default.

Finally, deploy the configuration changes on boot servers:

[source,bash]
----
hpc-config-push && \
  clush -bg hpc_profiles:bootsystem::server \
    hpc-config-apply
----

[[production-boot-installer]]
=== Debian Installer Environment

As explained in <<arch-adv-boot-install>>, the Debian installer environment is
installed with `debian-install-*-netboot-amd64` packages. These packages are
designed to work on most hardware, however it may be required to use alternate
environment in some cases, notably if the hardware needs special non-free
modules or firmwares during the installation.

For this purpose, Puppet-HPC lets the ability to deploy custom Debian Installer
environment within an archive.

For information, it is possible to build a base archive using the packages, for
example:

[source,bash]
----
# install netboot package
apt-get install debian-installer-9-netboot-amd64

# create the base netboot archive
tar chzf $ADMIN/hpc-privatedata/files/$CLUSTER/cluster/boot/disk-installer/scibian9/netboot.tar.gz \
  -C /usr/lib/debian-installer/images/9/amd64/text .
----

Starting from this point, the archive can be tuned upon your needs.

To deploy this archive on the boot servers, the `boothttp::archives` hash
parameter must be defined accordingly in the cluster specific layer of the Hiera
repository:

[source,yaml]
----
boothttp::archives:
  "%{hiera('website_dir')}/disk/scibian9/custom/netboot.tar.gz":
    source:       "%{::private_files_dir}/boot/disk-installer/scibian9/netboot.tar.gz"
    extract_path: "%{hiera('website_dir')}/disk/scibian9/custom"
    extract:      true
----

Then, define a bootmenu entry, following the procedure in
<<production-boot-menu>>, to network boot this custom environment.

Finally, deploy the new configuration on the boot servers:

[source,bash]
----
hpc-config-push && \
  clush -bg hpc_profiles:bootsystem::server \
    hpc-config-apply
----

[[production-boot-partitions]]
=== Alternate Partition Schemas

As explained in <<arch-adv-preseedator>>, the preseed generator provides a link
to a CGI script that generates dynamically for the node a partition schema
(aka. _recipe_) for Debian installer partman utility.

By default, this script sends a partition schema common to all nodes. The
default common partition schema is provided by `scibian-hpc-netboot-preseedator`
package. It configures the `/dev/sda` disk with LVM physical volume and creates
dedicated logical volumes for `/`, `/var`, `/tmp` and swap partitions. However,
the script is able to send specific partitions schemas for a given host or role.

Puppet-HPC gives the ability to override the default common partition schema
provided by the package and to deploy these specific partition schemas and

Once the alternate partman partition recipe is defined, copy the file into
`$ADMIN/hpc-privatedata/files/$CLUSTER/cluster/boot/disk-installer/schemas/`
directory.

NOTE: The `debian-installer` package provides documentation to help writing
partman recipes, in files
`/usr/share/doc/debian-installer/devel/partman-auto*-recipe.txt*`.

Then, define the `boothttp::partition_schemas` hash parameter in cluster layer
of the Hiera repository to declare the partition schemas to deploy, for
example:

```
boothttp::partition_schemas:
  common:
    src:  "%{::private_files_dir}/boot/disk-installer/schemas/common"
    dest: 'common'
  proxy:
    src:  "%{::private_files_dir}/boot/disk-installer/schemas/roles/proxy"
    dest: 'roles/proxy'
  fbbatch2:
    src:  "%{::private_files_dir}/boot/disk-installer/schemas/nodes/fbbatch2"
    dest: 'nodes/fbbatch2'
```

In this example, the following partition schemas are deployed:

* An override of the common partition schema,
* A partition schema for all nodes having the _proxy_ role,
* A partition schema specific to `fbbatch2` node.

Finally, deploy the new configuration on the boot servers:

[source,bash]
----
hpc-config-push && \
  clush -bg hpc_profiles:bootsystem::server \
    hpc-config-apply
----
