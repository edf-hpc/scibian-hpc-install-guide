=== Frontends SSH Load-balancing and High-availability

The frontend nodes offer a virtual IP address on the WAN network that features
both an highly-available and load-balanced SSH service for users to access the
HPC cluster. The load-balancing feature automatically distributes users on all
available frontend nodes. This load-balancing is operated with persistence so
that users (based on their source IP address) are always redirected to the same
frontend node in a time frame. Behind the virtual IP address, the
high-availability of SSH service is also ensured in case of outage on a frontend
node. These load-balancing and high-availability features are ensured by
keepalived software.

For security reasons, a firewall is also setup on the frontend nodes to control
outgoing network traffic. This firewall service is managed by Shorewall, a
high-level configuration tool for Linux netfilter. Because of all the various
network flows involved in keepalived, it must be tightly integrated with the
firewall rules. The following diagram illustrates both the network principles
behind the high-availability/load-balancing mechanisms and the integration with
the software components of the firewall:

[[img-ssh_ll_ha]]
.sshd load-balancing HA mechanism with firewall integration
image::src/img/sshd_frontend_ha_ll.svg[width=650]

The keepalived sofware checks each others nodes using the VRRPfootnote:[Virtual
Router Redundancy Protocol] protocol on the WAN network interfaces (purple
arrow in the diagram). This protocol must be allowed in the OUTPUT chain of the
firewall to make keepalived work properly.

On the master frontend node, the HA virtual IP address is set on the network
interface attached to the WAN network. The keepalived software configures
IPVSfootnote:[IP Virtual Server] Linux kernel load-balancer to redirect new TCP
connections with Round-Robin algorithm. Therefore, part of TCP connections are
redirected to the `sshd` daemon of other frontends (orange arrow in the
diagram). An exception must be present in the OUTPUT chain of the firewall to
allow these redirected connections.

To perform such redirections, IPVS simply changes the destination MAC address,
to set the address of the real destination frontend, in the Ethernet layer of
the first packet of the TCP connection. However, the destination IP address does
not change: it is still the virtual IP address.

On the slaves frontend nodes, the HA virtual IP address is set on the loopback
interface. This is required to make the kernel accept the redirected packets
from the master frontend node addressed to the virtual IP address. In order to
avoid endless loops, the IPVS redirection rules are disabled on slave frontend
nodes. Else packets would be redirected endlessly.

By default, the Linux kernel answers the ARP requests coming from any network
device for any IP address attached to any network device. Example: on a system
with two network devices `eth0` with `ip0` and `eth1` with `ip1`, if an ARP
request is received for `ip1` on `eth0`, the kernel positively responds to it,
with the MAC address of `eth0`. Though it is convenient in many cases, this
feature is annoying on frontend nodes, since the virtual IP address is set on
all frontend nodes, so all frontend nodes answer the ARP requests coming from
the WAN default gateway. In order to avoid this behaviour, the
`net.ipv4.conf.<netif>.arp_ignore` and `net.ipv4.conf.<netif>.arp_announce`
sysctl Linux kernel parameters, where `<netif>` is the network interface
connected to the WAN network, are respectively set to 1 and 2. Please refer to
Linux documentation for more details on these parameters and their values:
http://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt

The keepalived software also checks periodically if the `sshd` service is still
available on other frontend nodes, by trying to perform a TCP connection to the
real IP addresses on TCP/22 port (green arrow in the diagram). An exception must
be present in the OUPUT chain of the firewall to allow these connections.

There is an unexplained behaviour in the Linux kernel where Netfilter conntrack
module consider new TCP connections redirected by IPVS to local `sshd` daemon
have an invalid cstate. This point can be verified with well placed iptables
rules using the LOG destination. This make the TCP SYN/ACK answer from the
`sshd` blocked by the OUTPUT chain since it considers the connection is new and
not related to any incoming connections. To workaround this annoying behaviour,
an exception has been added in the OUTPUT chain of the firewall to accept
connections whose source port is TCP/22 and source IP address is the virtual IP
address. This is not totally satisfaying in terms of security but there is no
known easy nor obvious way to exploit this security exception from users
perspective for other purpose.

If a slave frontend node becomes unavailable, keepalived detects with either
VRRP checks, or even TCP checks in case only the `sshd` is crashed. The IPVS
rules are changed dynamically to avoid redirecting new TCP connections to this
failing node.

If the master frontend node becomes unavailable, the keepalived software on
other frontends select a new master node. Then, on this new master node,
keepalived restore the IPVS redirection rules (since they were previously
disabled to avoid loops) and move the virtual IP address from the loopback
interface to the WAN network interface.
