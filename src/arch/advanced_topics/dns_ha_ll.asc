[[arch-topics-dns_ll_ha]]
=== Service nodes: DNS load-balancing and high-availability

This diagram gives an overview of the load-balancing and high-availability
mechanisms involved in the DNS service of the Scibian HPC clusters:

[[img-dns_ll_ha]]
.DNS service load-balancing and high-availability
image::src/img/arch_dns_ha_ll.svg[width=450]

On Linux systems, when an application needs to resolve a network hostname, it
usually calls the `gethostbyname*()` and `getaddrinfo()` functions of the libc.
With a common configuration of the Name Service Switch (in the file
__/etc/nsswitch.conf__), the libc searches for the IP address in the file
__/etc/hosts__ and then fallbacks to a DNS resolution. The DNS solver gathers
the IP address by sending a request to the DNS nameservers specified in the
file __/etc/resolv.conf__. If this file contains multiple nameservers, the
solver sends the request to the first nameserver. If it does not get the answer
before the timeout, it sends the request to the second nameserver, and so on .
If the application needs another DNS resolution, the solver will follow the
same logic, always trying the first nameserver in priority. It implies that,
with this default configuration, as long as the first nameserver answers the
requests before the timeout, the other nameservers are never requested and
the load is not balanced.

This behavior can be slightly altered with additional options in the file
__/etc/resolv.conf__

* `options rotate`: this option tells the libc DNS solver to send requests to
  all the nameservers for successive DNS requests of a process. The DNS solver
  is stateless and loaded locally for the processes as a library, either as a
  shared library or statically in the binary. Therefore, the rotation status is
  local to a process. The first DNS request of a process will always be sent to
  the first nameserver. The rotation only starts with the second DNS request of
  a process. Notably, this means that a program which sends one DNS request
  during its lifetime, launched _n_ times, will send _n_ DNS requests to the
  first nameserver only. While useful for programs with long lifetime, this
  option can not be considered as an efficient and sufficient load-balancing
  technique.
* `options timeout:1`: this option reduces the request timeout from the default
  value i.e. 60 seconds to 1 second. This is useful when a nameserver has an
  outage since many processes are literally stuck waiting for this timeout when
  it occurs. This causes many latency issues. With this option, the libc DNS
  solver quickly tries the other nameservers and the side-effects of the outage
  are significantly reduced.

On Scibian HPC clusters, Puppet manages the file __/etc/resolv.conf__ and
ensures these two options are present. It also randomizes the list of
nameservers with the `fqdn_rotate()` function of the Puppet stdlib community
module. This function randomizes the order of the elements of an array but uses
the `fqdn` fact to ensure the order stays the same for a node with a given FQDN.
That is, each node will get a different random rotation from this function,
but a given node's result will be the same every time unless its hostname
changes. This prevents the file content from changing with every Puppet runs.
With this function, all the DNS nameservers are equivalently balanced on the
nodes. Combined with the `options rotate`, it forms an efficient load-balancing
mechanism.

The DNS servers are managed with the `bind` daemon on the generic service nodes.
Each generic service nodes has a virtual IP address managed by a
`keepalived` daemon and balanced between all the generic service nodes. The IP
addresses of the nameservers mentioned in the file __/etc/resolv.conf__ on the
nodes are these virtual IP addresses. If a generic service node fails, its
virtual IP address is automatically routed to another generic service node.
In combination with `options timeout:1`, this constitutes a reliable failover
mechanism and ensures the high-availability of the DNS service.
