=== Authentication and encryption keys

==== Creating the cluster password

This password is used by clara and puppet-hpc to encrypt files with sensitive
data. It will be stored inside the configuration, but it should be backed up 
elsewhere.

----
# openssl rand -base64 32
----

Note this value for now.

==== Configuration encryption keys

As explained in the _Puppet-HPC reference documentation_ (chapter _Software
Architecture_, section _Sensitive Data Encryption_), the sensitive data stored
in the internal configuration repository are encrypted using two keys:

* asymmetric PKCS7 key pair for encrypting values in Hiera,
* symmetric AES key for encrypting files.

The first step is to create the eyaml keys directory:

----
# mkdir -p /etc/puppet/secure/keys/
# chmod 700 /etc/puppet/secure
----

We then setup the eyaml configuration to use this directory.

----
# mkdir -p ~/.eyaml
# cat << EOF > ~/.eyaml/config.yaml
---
  pkcs7_private_key: /etc/puppet/secure/keys/private_key.pkcs7.pem
  pkcs7_public_key: /etc/puppet/secure/keys/public_key.pkcs7.pem
EOF
----

Next, we actually create the keys.

----
eyaml createkeys
----

We can now add the cluster password to the cluster configuration:

----
# eyaml edit $ADMIN/hpc-privatedata/hieradata/$CLUSTER/cluster.yaml
----

In the editor add a line like this, and save:

----
cluster_decrypt_password: DEC::PKCS7[<the password given by the openssl command>]!
----

The next step is to store the newly created eyaml in the configuration:

----
mkdir $ADMIN/hpc-privatedata/files/$CLUSTER/eyaml

# tar cJf $ADMIN/hpc-privatedata/files/$CLUSTER/eyaml/keys.tar.xz -C /etc/puppet/secure keys
# $ADMIN/puppet-hpc/scripts/encode-file.sh $ADMIN/hpc-privatedata $CLUSTER $ADMIN/hpc-privatedata/files/$CLUSTER/eyaml/keys.tar.xz
# rm $ADMIN/hpc-privatedata/files/$CLUSTER/eyaml/keys.tar.xz
----

==== SSH host keys

The SSH host keys must stay consistent between node re-installations and/or
diskless reboots. To ensure this, the SSH host keys are generated in the
cluster's files directory of the internal configuration repository before their
first installation and/or diskless boot.

Firstly, create the `hostkeys` directory:

----
# cd $ADMIN
# mkdir -p hpc-privatedata/files/$CLUSTER/hostkeys
----

During this step, the `known_hosts` file will also be synchronized with the
generated keys. This file will be stored in
`hpc-privatedata/files/$CLUSTER/ssh/known_hosts`. To build this file, the
script needs to know the local domain name for the cluster, the script will use
the local domain of the machine where it runs by default. If this is not
correct you must provide the domain.

Run the following script:

----
# puppet-hpc/scripts/sync-ssh-hostkeys.sh hpc-privatedata $CLUSTER $CLUSTER.$NETDOMAIN
----

This script ensures that all nodes present in the `master_network` hash have
valid SSH host keys.

==== SSH root key

For password-less SSH authentication from the admin and generic service nodes to
all the other nodes of the cluster, SSH authentication keys pair are deployed
for root on the nodes.

First, create the `rootkeys` sub-directory in the cluster's files directory of
the internal configuration repository:

----
# cd $ADMIN
# mkdir -p hpc-privatedata/files/$CLUSTER/rootkeys
----

Then, generate the key pair:

----
# ssh-keygen -t rsa -b 2048 -N '' -C root@$CLUSTER \
    -f hpc-privatedata/files/$CLUSTER/rootkeys/id_rsa_root
----

Key type and size can be adjusted. Encode the private key with the
following helper script provided by Puppet-HPC:

----
# puppet-hpc/scripts/encode-file.sh hpc-privatedata $CLUSTER \
    hpc-privatedata/files/$CLUSTER/rootkeys/id_rsa_root
generating encoded file hpc-privatedata/files/foobar/rootkeys/id_rsa_root.enc
----

Do not forget to remove the generated unencrypted private key:

----
# rm hpc-privatedata/files/$CLUSTER/rootkeys/id_rsa_root
----

Finally, publish the public key with the following parameter in the cluster
specific layer of the hiera repository
`$ADMIN/hpc-privatedata/hieradata/$CLUSTER/cluster.yaml`:

----
openssh::server::root_public_key: <pubkey>
----

==== Root password

The root password hash is stored as a eyaml value. Read the hash in the `/etc/shadow` file. Get the whole second field:

----
root:$6$t6Wdzysq$q90NK5V2Z78CVNtptsaaAZxjmhndwjM7lReAZMFYRSYNn2MS8OPDaBVy5vAdO97g/K6Gra9ZPsQ7KKdHqkN8r1:17763:0:99999:7:::
----

This gives: "`$6$t6Wdzysq$q90NK5V2Z78CVNtptsaaAZxjmhndwjM7lReAZMFYRSYNn2MS8OPDaBVy5vAdO97g/K6Gra9ZPsQ7KKdHqkN8r1`".

----
# eyaml edit $ADMIN/hpc-privatedata/hieradata/$CLUSTER/cluster.yaml
----

Use this command to add a line:
----
profiles::cluster::root_password_hash: DEC::PKCS7[$6$t6Wdzysq$q90NK5V2Z78CVNtptsaaAZxjmhndwjM7lReAZMFYRSYNn2MS8OPDaBVy5vAdO97g/K6Gra9ZPsQ7KKdHqkN8r1]!
----



